name: Release Matching Python Tags

on:
  workflow_dispatch:
    inputs:
      tag_filter:
        description: 'Optional: Filter for Python versions (e.g., 3.13.*). If empty, uses latest.'
        required: false
        type: string

jobs:
  get-tags:
    runs-on: ubuntu-latest
    outputs:
      tags_json: ${{ steps.collect.outputs.tags_json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          pip install -r .github/scripts/requirements.txt

      - name: Get Python tags matching filter
        id: collect
        run: |
          echo "Input tag_filter: '${{ github.event.inputs.tag_filter }}'"

          TAG_FILTER="${{ github.event.inputs.tag_filter }}"
          if [ -z "$TAG_FILTER" ]; then
            LATEST=$(python .github/scripts/get_python_version.py --latest)
            echo "No tag_filter input provided, fetched latest tag: $LATEST"
            # Convert latest version like 3.13.3 to 3.13.*
            FILTER=$(echo "$LATEST" | sed -E 's/\.[0-9]+$/.*/')
            echo "Converted latest tag to filter: $FILTER"
          else
            FILTER="$TAG_FILTER"
            echo "Using provided tag_filter: $FILTER"
          fi

          TAGS=$(python .github/scripts/get_python_version.py --list --filter "$FILTER")
          echo "Raw tags found:"
          echo "$TAGS"

          TAGS_JSON=$(echo "$TAGS" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Tags JSON for matrix:"
          echo "$TAGS_JSON"

          echo "tags_json=$TAGS_JSON" >> "$GITHUB_OUTPUT"

  build-and-release-matrix:
    needs: get-tags
    strategy:
      matrix:
        tag: ${{ fromJson(needs.get-tags.outputs.tags_json) }}
        platform-version: ['24.04', '22.04']
        arch: [ppc64le]
        runner-label: [ubuntu-24.04-ppc64le]
    uses: ./.github/workflows/reusable-build-and-release-python-versions.yml
    with:
      arch: ${{ matrix.arch }}
      tag: ${{ matrix.tag }}
      platform-version: ${{ matrix['platform-version'] }}
      runner-label: ${{ matrix['runner-label'] }}


  release-assets:
    needs: [build-and-release-matrix, get-tags]
    strategy:
      matrix:
        tag: ${{ fromJson(needs.get-tags.outputs.tags_json) }}
    uses: ./.github/workflows/reusable-release-python-tar.yml
    with:
      tag: ${{ matrix.tag }}
    secrets:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-all-manifests:
    needs: release-assets
    runs-on: ubuntu-latest
    concurrency:
      group: main-manifest-merge
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          pip install -r .github/scripts/requirements.txt

      - name: Pull latest arch-specific manifests
        run: git pull

      - name: Download upstream versions-manifest.json
        run: |
          curl -sSL -o versions-manifest.json "https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json"

      - name: Merge all arch-specific manifests into main manifest
        run: |
          for manifest_file in versions-manifests/*.json; do
            if [ -f "$manifest_file" ]; then
              echo "Merging $manifest_file into versions-manifest.json"
              python .github/scripts/manifest_tools.py merge versions-manifest.json "$manifest_file" versions-manifest.json
            fi
          done

      - name: Commit and push main manifest
        run: |
          git add versions-manifest.json
          git commit -m "Update main manifest [skip ci]" || echo "No changes to commit"
          git push
