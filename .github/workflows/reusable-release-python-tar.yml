name: Reusable Release Python Tar

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., 3.13.3)"
        required: true
        type: string
  workflow_call:
    inputs:
      tag:
        description: "Release tag (e.g., 3.13.3)"
        required: true
        type: string
    secrets:
      GH_TOKEN:
        required: false

jobs:
  release-assets-and-update-manifest:
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifact
          pattern: python-tar-${{ inputs.tag }}-*
          merge-multiple: true

      - name: List downloaded files (debugging step)
        run: ls -R ./artifact

      - name: Release all .tar.gz files from python-tar
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag }}
          name: Release ${{ inputs.tag }}
          files: ./artifact/**/*.tar.gz
          draft: false
          prerelease: false

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull latest changes
        run: git pull

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install typer requests pydantic
        working-directory: .github/scripts

      - name: Create arch-specific manifest for released asset
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          assets_json='${{ steps.create_release.outputs.assets }}'
          asset_count=$(echo "$assets_json" | jq length)

          for i in $(seq 0 $((asset_count - 1))); do
            asset_name=$(echo "$assets_json" | jq -r ".[$i].name")
            download_url=$(echo "$assets_json" | jq -r ".[$i].browser_download_url")

            # Parse asset name: python-tag-linux-platform_version-arch.tar.gz
            base_name="${asset_name#python-}"
            base_name="${base_name%.tar.gz}"

            IFS='-' read -r _ platform platform_version arch <<< "$base_name"

            manifest_file="versions-manifests/${{ inputs.tag }}-${arch}.json"

            # Ensure the directory exists
            mkdir -p versions-manifests

            # Always create a new manifest file for this release
            echo "[]" > "$manifest_file"

            echo "::group::Parsed asset metadata"
            echo "Asset: $asset_name"
            echo "Version: ${{ inputs.tag }}"
            echo "Platform: $platform"
            echo "Platform version: $platform_version"
            echo "Arch: $arch"
            echo "Download URL: $download_url"
            echo "::endgroup::"

            python .github/scripts/manifest_tools.py update_version \
              "$manifest_file" \
              --version "${{ inputs.tag }}" \
              --filename "$asset_name" \
              --arch "$arch" \
              --platform "$platform" \
              --platform-version "$platform_version" \
              --download-url "$download_url" \
              --stable
          done

      - name: Commit and push updated arch-specific manifests
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "versions-manifests/${{ inputs.tag }}-${arch}.json"
          git commit -m "Update manifest for tag ${{ inputs.tag }} arch ${{ inputs.arch }} [skip ci]" || echo "No changes to commit"
          git pull --rebase
          git push
